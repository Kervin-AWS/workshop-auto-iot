[
{
	"uri": "/",
	"title": "AWS 数据赋能 智能互联",
	"tags": [],
	"description": "",
	"content": "  数据赋能 智能互联 开发者动手训练营\n本部署指南讨论了中国区IOT设备运用的架构注意事项和配置步骤。\n"
},
{
	"uri": "/010_architecture/",
	"title": "OverView",
	"tags": [],
	"description": "",
	"content": "在这个实验中，您将会学习到如何使用 AWS 的服务来构建一个 Alexa-Enabled 智能灯泡。\n在这个实验中，您将会创建以下资源:\n 一个虚拟的 Alexa-Enabled 智能家居灯泡 一个用于建立用户和设备绑定关系的系统，该服务基于 AppSync, Cognito User Pool, Lambda, DynamoDB 构建 一个 Alexa 的后端服务，该服务处理来自 Alexa 的指令，同时通过 IoT Core 操作灯泡的开关状态  "
},
{
	"uri": "/001_create_iot_core/",
	"title": "创建 IOT Core",
	"tags": [],
	"description": "",
	"content": " 部署说明 本章节将逐步带领您实现AWS IOT 核心的部署。\n我们将分别从以下步骤进行部署：\n 1. 创建智能灯泡模拟器   2. 修改默认的安全策略   "
},
{
	"uri": "/002_create_connection_thinganduser/",
	"title": "连接 IOT Core",
	"tags": [],
	"description": "",
	"content": " 部署说明 本章节将逐步带领您实现AWS IOT 核心的部署。\n我们将分别从以下步骤进行部署：\n 3. 启动Cloud9   4. 连接 IoT Core   5. 建立设备与用户绑定关系   "
},
{
	"uri": "/003_connect_alexaandthing/",
	"title": "配置 Alexa",
	"tags": [],
	"description": "",
	"content": " 配置说明 本章节将逐步带领您实现Alexa 的配置。\n我们将分别从以下步骤进行配置：\n 6. 创建 SMART HOME SKILL   7. 在 Alexa Developer 控制台中配置 Account Linking   8. 创建并部署 ALEXA 后端 LAMBDA   9. 配置 ALEXA SKILL ENDPOINT   10. 在Alexa中查找你的设备   "
},
{
	"uri": "/004_connect_raspberry/",
	"title": "连接树莓派",
	"tags": [],
	"description": "",
	"content": " 配置说明 本章节将逐步带领您实现树莓派的配置。\n我们将分别从以下步骤进行配置：\n 11. 将灯泡连接到树莓派的引脚上   12. 测试 SMART HOME SKILL   "
},
{
	"uri": "/001_create_iot_core/020_create_simulator/",
	"title": "1. 创建智能灯泡模拟器",
	"tags": [],
	"description": "",
	"content": "在本节中，我们会创建Iot事物、证书以及安全策略。\n注意：请选择宁夏Region\n  登陆 AWS IoT Core 控制台，显示如下。\n 在左侧导航栏中，选择 Onboard 菜单\n 在 Configuring a device 中, 点击 Getting Started 按钮\n 在 How are you connecting to AWS IoT? 页面, 选择 Linux 作为运行平台; 选择 Node.js for IoT Device SDK， 然后点击 Next\n 在 Name 字段中输入 ratchet, 点击 Next step 如果您与别人共享这个 AWS 账号，请输入一些前缀来区别您和别人创建的事物, e.g. cw_ratchet。    在 Download connection kit 页面中，点击 Linux/OSX 按钮来下载我们所需的文件。当下载完成后，点击 Next 按钮。   总结一下, 我们在之前的步骤中，创建了如下内容： - 一个 安全策略 来控制事物访问 IoT Core - 一个 Linux/OSX zip 文件，包含连接 IoT Core 所需的证书\n请不要丢失这个 ZIP 文件，它包含 private key（私有安全密钥）, 一旦遗失，无法再次获取。\n 在这个实验中，您将会创建如何资源:\n 一个虚拟的 Alexa-Enabled 智能家居灯泡 一个用于建立用户和设备绑定关系的系统，该服务基于 AppSync, Cognito User Pool, Lambda, DynamoDB 构建 一个 Alexa 的后端服务，该服务处理来自 Alexa 的指令，同时通过 IoT Core 操作灯泡的开关状态  "
},
{
	"uri": "/001_create_iot_core/030_change_policy/",
	"title": "2. 修改默认的安全策略",
	"tags": [],
	"description": "",
	"content": "默认的安全策略会限制这个设备能发布的消息 topic。在这个实验中，我们将会创建一个更加开放的安全策略，以便我们能够通过APP进行连接。因此，需要先找到 之前创建的策略。\n 在 AWS IoT Core 控制台点击 Manage，它会默认选中 Things\n 找到之前步骤中创建的事物, 例如本实验中叫做 ratchet\n 选择这个事物\n 在左侧菜单栏，点击 Security\n 点击已经附加的策略，如下  点击 Policies  选择 Policy, 这个实验中，应该叫 ratchet-Policy\n 点击 Edit Policy Document\n Enter the following for your document\n{ \u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;, \u0026quot;Statement\u0026quot;: [ { \u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;, \u0026quot;Action\u0026quot;: [ \u0026quot;iot:Publish\u0026quot;, \u0026quot;iot:Subscribe\u0026quot;, \u0026quot;iot:Connect\u0026quot;, \u0026quot;iot:Receive\u0026quot; ], \u0026quot;Resource\u0026quot;: [ \u0026quot;*\u0026quot; ] } ] }  点击 Save as new version   现在，你的设备可以发布和订阅任何消息。至今，我们已经完成了三个 IoT 组件的创建: - 设备证书 - 一个安全策略 - 安全策略与设备证书与事物的关联\n"
},
{
	"uri": "/002_create_connection_thinganduser/040_setup_cloud9/",
	"title": "3. 启动Cloud9",
	"tags": [],
	"description": "",
	"content": " 本实验使用使用 Cloud9 开发环境，下面将引导你运用EC2创建Cloud9环境\n  启动EC2 ，新建实例：  点击Marketplace，搜索Cloud9，点击选择  选择实例类型，此处选择t3a.small:  新建并下载密钥对，此处按照要求命名   然后点击启动实例，成功后，查看实例公有IP，\n在浏览器中输入 公有IP:8181 （请关闭所有代理）\n输入用户名： aws，\n密码： 实例ID（如下图所示），进入Cloud9界面.\n"
},
{
	"uri": "/002_create_connection_thinganduser/050_connect_2_iotcore/",
	"title": "4. 连接 IoT Core",
	"tags": [],
	"description": "",
	"content": " 请确认当前网络环境是否屏蔽了 8883 端口。 如果被屏蔽，可以考虑使用一个 guest network 或者 个人热点。\n  Git clone 如下代码仓库, 在 Cloud9 的 terminal 中输入\ngit clone https://github.com/Kervin-AWS/aws-alexa-workshop-smarthome-lamp-cn.git cd aws-alexa-workshop-smarthome-lamp-cn  解压之前下载的 ZIP 文件. 您将获得如下文件:\n 一个 private key, \\\u0026lt;thing-name\\\u0026gt;.private.key\n 一个 device certificate, \\\u0026lt;thing-name\\\u0026gt;.cert.pem\n  把 private key 重命名为 private.key 并且拖拽上传到 credentials 文件夹(选择替换).\n 将 device certificate 重命名为 cert.pem 并且拖拽上传到 credentials 文件夹(选择替换).\n 修改 index.js 中的配置并保存\n iotEndpoint. 在 IoT Core 控制台左侧 Settings 菜单中可以找到  thingName. 之前创建的事物名称\n deviceBindingUrl. 这个请不要修改它，本实验已经帮您配置好Amplify\n  安装依赖. 在 Cloud9 的 terminal 中运行\nnpm install  运行\nnode index.js  启动应用程序。运行成功后， terminal 将会输出一个二维码。 在下一步中，我们将使用这个二维码完成用户和设备之间的绑定关系。   "
},
{
	"uri": "/002_create_connection_thinganduser/060_connect_thinganduser/",
	"title": "5. 建立设备与用户绑定关系",
	"tags": [],
	"description": "",
	"content": "在本章节中，我们会通过扫描设备二维码，来建立设备和用户之间的绑定关系。\n 确保已经完成上一步且”虚拟智能灯泡模拟器”程序正在运行。\n 使用您的 手机相机应用/支付宝 来扫描二维码\n 浏览器会被重定向到 登陆页面 ，如果您还没有账号，请创建一个账号，如已经有账号，点击登录。\n 浏览器会被重定向到 设备绑定 页面，点击 Bind 按钮  刷新页面，检查这个按钮的状态是否变成了 Unbind, 如果已经变化, 则已经绑定成功\n  "
},
{
	"uri": "/003_connect_alexaandthing/070_create_skill/",
	"title": "6. 创建 SMART HOME SKILL",
	"tags": [],
	"description": "",
	"content": "在此章节中，我们将创建一个空的Alexa Skill。我们将会在下面的章节中配置它。\n 在浏览器中，打开 Alexa Skills Kit Developer Console。如果您还没有 完成认证，您需要使用您的 Amazon Developer Account 来登陆。\n 点击 Create Skill 按钮。\n 在 Skill name 处，输入 SmartLamp。\n 选择 English (US) 来作为技能的默认语言。\n 在 Choose a model to add to your skill 中选择 Smart Home model。点击此处了解Smart home model相关信息。\n 在 Choose a method to host your skill’s backend resources 中，选择 Provision your own\n 点击 Create 按钮来完成技能创建\n 完成创建后，您应该会被自动跳转到一个叫做 SmartLamp 的配置页面。在 Smart Home service endpoint 中，找到 Skill ID, 点击 Copy to clipboard 来拷贝并复制到其他地方。这个 SKill ID 会在后续的配置过程中被使用到。 现阶段，您不需要配置其他信息。\n  "
},
{
	"uri": "/003_connect_alexaandthing/080_account_linking/",
	"title": "7. 在 Alexa Developer 控制台中配置 Account Linking",
	"tags": [],
	"description": "",
	"content": " 打开 Alexa Console\n 在 Skills 列表中，选择之前创建的 Skill\n 在左侧导航栏中，选择 Account Linking\n 在 Security Provider Information 下，选择 Auth Code Grant\n 在 Authorization URI 中输入 https://alexa-workshop-dev-cn01.auth.us-east-1.amazoncognito.com/oauth2/authorize\n 在 Access Token URI 中输入 https://alexa-workshop-dev-cn01.auth.us-east-1.amazoncognito.com/oauth2/token\n 在 Client ID 中输入4od0k6ioo94e29naua62fhk0tt\n 在 Client Secret 中输入mteph8cegr5v645tn4ua1ommobpcd26k9ner80c2fbudkguqgm8  点击 Add scope 并且输入 openid. 对于 Smart Home Skill, 至少需要选择一个 scope\n 其余保持默认不变，在右上角点击 Save 按钮    注意，为了简化实验，我们已经配置好了Cognito。请把Account Link最下方的三个链接给到我们，我们会在Cognito中进行设置，这样才能Link成功。\n 请进入共享文档https://shimo.im/sheets/KxxDpXx3XdD3DKkQ/MODOC，将您的三个URL输入其中，如下图所示，并通知现场工作人员\n"
},
{
	"uri": "/003_connect_alexaandthing/090_lambda/",
	"title": "8. 创建并部署 ALEXA 后端 LAMBDA",
	"tags": [],
	"description": "",
	"content": " 由于考虑到信息安全问题，具有admin权限的账号需要您手动输入两次账户密钥，感谢您的耐心与理解\n  首先，进入您的 Cloud9 环境根目录, 打开一个terminal配置aws configure，赋予该环境您global账户的访问权限，为后面的global lambda远程部署做准备（此处使用Global账号）\n此步骤需要您通过输入\naws configure  来配置AKSK、Region等信息\nAWS Access Key ID: 现场提供的Global AK\nAWS Secret Access Key ID: 现场提供的Global SK\nregion: us-east-1\n 在 terminal 中输入\ngit clone https://github.com/Kervin-AWS/aws-alexa-workshop-smarthome-cn.git cd aws-alexa-workshop-smarthome-cn  编辑 config.json 文件,\n您需要修改 alexaSmartHomeAppId 为您的Alexa Skills Id，\n您需要修改 iotEndpoint 为您的中国区的IOT endpoint，\n其余参数保持默认不变。\n 编辑index.js 中的AWS.IotData 初始化代码，输入现场提供的中国区账号AKSK，从而可以实现对国内IOT设备的控制。注意本实验仅为实现功能，生产环境将会采用非明文的认证方式。\nAWS Access Key ID: 现场提供的China AK\nAWS Secret Access Key ID: 现场提供的China SK\nregion: cn-northwest-1\n 为了简化实验，请您编辑index.js 中的 AWS.DynamoDB.DocumentClient 初始化代码，请复制下方的DynamoDB只读AKSK到index.js中的28行，注意本实验仅为实现功能，生产环境将会采用非明文的认证方式。\nAWS Access Key ID: \nAWS Secret Access Key ID: \n 修改serverless.yml 里面的function名称，注意每一个IOT要用不同的名称  运行 npm install 来安装依赖， 包括开发环境的依赖\n 运行 npm config set registry https://registry.npm.taobao.org 换源\n 运行 npm install -g serverless 来安装serverless。\n 运行 sls deploy\n  部署成功后，您可以通过命令行查看部署好的一个类似于 alexa-smarthome-{stage}-backend 的 Lambda 方法，并且查看到RAN\naws lambda list-functions  "
},
{
	"uri": "/003_connect_alexaandthing/100_alexa_skill_endpoint/",
	"title": "9. 配置 ALEXA SKILL ENDPOINT",
	"tags": [],
	"description": "",
	"content": "本小节，将刚才创建的 Lambda 函数与 Alexa Skill link在一起。\n 拷贝 Lambda 方法的 ARN, 在 Cloud 9 中输入\naws lambda list-functions  将下图中的ARN拷贝下来\n 打开 Alexa Developer Console, 选择创建的 Smart Home 技能\n 在 Default endpoint 黏贴拷贝的 Lambda ARN   点击右上角的 Save 按钮\n"
},
{
	"uri": "/003_connect_alexaandthing/101_alxea_discover_device/",
	"title": "10. 在Alexa中查找你的设备",
	"tags": [],
	"description": "",
	"content": "本小节中，您将在Alexa中查找你的device。\n 打开Alexa 网页版客户端\n 点击左侧 Skills , 随后点击右上角的 Your Skills  点击 ALL SKILLS 找到你的skill，然后点击，进入激活页面 激活成功后, 返回到skill 页面，点击弹出的 Discover Devices 稍等片刻后，则可以看到自己的设备   "
},
{
	"uri": "/004_connect_raspberry/110_connet_raspberry/",
	"title": "11. 将灯泡连接到树莓派的引脚上",
	"tags": [],
	"description": "",
	"content": " 按下图将灯泡通过母母的杜邦线连接到树莓派上： 灯泡的R极 -\u0026gt; 树莓派18引脚\n灯泡的负极-\u0026gt; 树莓派GND引脚\n将代码拉取到树莓派中  通过ssh进入树莓派  用户名： pi\n密码： awsworkshop\nssh pi@192.xxx.xxx.xx   首先拉取github树莓派端的代码\ngit clone https://github.com/Kervin-AWS/aws-alexa-workshop-raspi-cn.git  在本地terminal内进入“创建智能灯泡模拟器”步骤中下载的证书文件夹，将生成的cert.pem 、 private.key 通过scp的方式传入树莓派的aws-alexa-workshop-raspi-cn文件夹中\nscp ./cert.pem pi@xxx.xxx.xxx.xxx:/home/pi/aws-alexa-workshop-raspi-cn scp ./private.key pi@xxx.xxx.xxx.xxx:/home/pi/aws-alexa-workshop-raspi-cn   在树莓派内通过 vim 或者 nano 修改ledSwitch.py 中的awsiotHost为自己设置的IOT Endpoint  修改ledSwitch.py 中的thingName为自己设置的item name  修改完成后保存退出\n 在树莓派命令行中输入python ledSwitch.py，启动IOT脚本\npython ledSwitch.py   "
},
{
	"uri": "/004_connect_raspberry/120_test_the_lamp/",
	"title": "12. 测试 SMART HOME SKILL",
	"tags": [],
	"description": "",
	"content": "至此，我们已经完成了所有Alexa Smart Home Skill的配置。现在，您可以通过语音来进行智能灯泡开关控制的测试了。 在本节中，我们还将有两个进阶挑战，可以使得您通过简单而明确的指令控制多个灯泡。\n您可以通过Alexa APP， Alexa Developer Console 或者 Echo 来进行测试。\n 打开 Alexa Developer Console, 选择您创建的技能\n 点击 Test tab, 尝试输入 turn on the \u0026lt;device-friendly-name\u0026gt;  检查树莓派的灯泡状态变化 \n 如果您没有树莓派，您可以在IOT 控制台通过设备的影子查看虚拟设备的状态切换   "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/authors/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " Thanks to our wonderful contributors  for making Open Source a better place! Please go to Contributors page to checkout authors for this Workshop\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]